#include "yahoo_quote.hpp"


namespace efl::sources::yahoo
{
    void yahoo_quote_t::from_json(const nlohmann::json &j)
    {
        j.at("region").get_to(region);
        j.at("quoteType").get_to(quoteType);
        j.at("typeDisp").get_to(typeDisp);
        j.at("quoteSourceName").get_to(quoteSourceName);
        j.at("customPriceAlertConfidence").get_to(customPriceAlertConfidence);
        j.at("regularMarketChangePercent").get_to(regularMarketChangePercent);
        j.at("regularMarketPrice").get_to(regularMarketPrice);
        j.at("currency").get_to(currency);
        j.at("exchangeTimezoneName").get_to(exchangeTimezoneName);
        j.at("exchangeTimezoneShortName").get_to(exchangeTimezoneShortName);
        j.at("gmtOffSetMilliseconds").get_to(gmtOffSetMilliseconds);
        j.at("market").get_to(market);
        j.at("exchange").get_to(exchange);
        j.at("shortName").get_to(shortName);
        j.at("longName").get_to(longName);
        j.at("marketState").get_to(marketState);
        j.at("firstTradeDateMilliseconds").get_to(firstTradeDateMilliseconds);
        j.at("regularMarketDayLow").get_to(regularMarketDayLow);
        j.at("regularMarketVolume").get_to(regularMarketVolume);
        j.at("regularMarketPreviousClose").get_to(regularMarketPreviousClose);
        j.at("bid").get_to(bid);
        j.at("ask").get_to(ask);
        j.at("bidSize").get_to(bidSize);
        j.at("askSize").get_to(askSize);
        j.at("fullExchangeName").get_to(fullExchangeName);
        j.at("financialCurrency").get_to(financialCurrency);
        j.at("regularMarketOpen").get_to(regularMarketOpen);
        j.at("averageDailyVolume3Month").get_to(averageDailyVolume3Month);
        j.at("averageDailyVolume10Day").get_to(averageDailyVolume10Day);
        j.at("fiftyTwoWeekLowChange").get_to(fiftyTwoWeekLowChange);
        j.at("fiftyTwoWeekLowChangePercent").get_to(fiftyTwoWeekLowChangePercent);
        j.at("fiftyTwoWeekRange").get_to(fiftyTwoWeekRange);
        j.at("fiftyTwoWeekHighChange").get_to(fiftyTwoWeekHighChange);
        j.at("fiftyTwoWeekHighChangePercent").get_to(fiftyTwoWeekHighChangePercent);
        j.at("fiftyTwoWeekLow").get_to(fiftyTwoWeekLow);
        j.at("fiftyTwoWeekHigh").get_to(fiftyTwoWeekHigh);
        j.at("earningsTimestamp").get_to(earningsTimestamp);
        j.at("earningsTimestampStart").get_to(earningsTimestampStart);
        j.at("earningsTimestampEnd").get_to(earningsTimestampEnd);
        j.at("trailingAnnualDividendRate").get_to(trailingAnnualDividendRate);
        j.at("trailingPE").get_to(trailingPE);
        j.at("trailingAnnualDividendYield").get_to(trailingAnnualDividendYield);
        j.at("epsTrailingTwelveMonths").get_to(epsTrailingTwelveMonths);
        j.at("epsForward").get_to(epsForward);
        j.at("sharesOutstanding").get_to(sharesOutstanding);
        j.at("bookValue").get_to(bookValue);
        j.at("fiftyDayAverage").get_to(fiftyDayAverage);
        j.at("fiftyDayAverageChange").get_to(fiftyDayAverageChange);
        j.at("fiftyDayAverageChangePercent").get_to(fiftyDayAverageChangePercent);
        j.at("twoHundredDayAverage").get_to(twoHundredDayAverage);
        j.at("twoHundredDayAverageChange").get_to(twoHundredDayAverageChange);
        j.at("twoHundredDayAverageChangePercent").get_to(twoHundredDayAverageChangePercent);
        j.at("marketCap").get_to(marketCap);
        j.at("forwardPE").get_to(forwardPE);
        j.at("priceToBook").get_to(priceToBook);
        j.at("sourceInterval").get_to(sourceInterval);
        j.at("exchangeDataDelayedBy").get_to(exchangeDataDelayedBy);
        j.at("averageAnalystRating").get_to(averageAnalystRating);
        j.at("priceHint").get_to(priceHint);
        j.at("regularMarketChange").get_to(regularMarketChange);
        j.at("regularMarketTime").get_to(regularMarketTime);
        j.at("regularMarketDayHigh").get_to(regularMarketDayHigh);
        j.at("regularMarketDayRange").get_to(regularMarketDayRange);
        j.at("symbol").get_to(symbol);
    }
}
